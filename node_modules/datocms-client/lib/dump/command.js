"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _callee2;

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _chokidar = _interopRequireDefault(require("chokidar"));

var _ora = _interopRequireDefault(require("ora"));

var _SiteClient = _interopRequireDefault(require("../site/SiteClient"));

var _detectSsg = _interopRequireDefault(require("./detectSsg"));

var _dump = _interopRequireDefault(require("./dump"));

var _requireToken = _interopRequireDefault(require("./requireToken"));

var _Loader = _interopRequireDefault(require("../local/Loader"));

var _ItemsRepo = _interopRequireDefault(require("../local/ItemsRepo"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _callee2(options) {
  var configFile, tokenOption, watch, quiet, previewMode, token, client, loader, unwatch;
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          configFile = _path["default"].resolve(options['--config'] || 'dato.config.js');
          tokenOption = options['--token'] || process.env.DATO_API_TOKEN;
          watch = options['--watch'];
          quiet = options['--quiet'];
          previewMode = options['--preview'];
          _context2.t0 = tokenOption;

          if (_context2.t0) {
            _context2.next = 10;
            break;
          }

          _context2.next = 9;
          return regeneratorRuntime.awrap((0, _requireToken["default"])());

        case 9:
          _context2.t0 = _context2.sent;

        case 10:
          token = _context2.t0;

          try {
            _fs["default"].accessSync(configFile);
          } catch (e) {
            process.stderr.write("Missing config file ".concat(configFile, "\n"));
            process.exit(1);
          }

          _context2.prev = 12;
          client = new _SiteClient["default"](token, {
            'X-Reason': 'dump',
            'X-SSG': (0, _detectSsg["default"])(process.cwd())
          }, 'https://site-api.datocms.com');
          loader = new _Loader["default"](client, previewMode);
          process.stdout.write('Fetching content from DatoCMS');
          _context2.next = 18;
          return regeneratorRuntime.awrap(loader.load());

        case 18:
          process.stdout.write('Done');
          _context2.next = 21;
          return regeneratorRuntime.awrap((0, _dump["default"])(configFile, new _ItemsRepo["default"](loader.entitiesRepo), quiet));

        case 21:
          if (watch) {
            unwatch = loader.watch(function _callee(promise) {
              var watchSpinner;
              return regeneratorRuntime.async(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      watchSpinner = (0, _ora["default"])('Detected change in content, loading new data').start();
                      _context.next = 3;
                      return regeneratorRuntime.awrap(promise);

                    case 3:
                      watchSpinner.succeed();
                      return _context.abrupt("return", (0, _dump["default"])(configFile, new _ItemsRepo["default"](loader.entitiesRepo), quiet));

                    case 5:
                    case "end":
                      return _context.stop();
                  }
                }
              });
            });
            process.on('SIGINT', function () {
              unwatch();
              process.exit();
            });

            _chokidar["default"].watch(configFile).on('change', function () {
              process.stdout.write('Detected change to config file!');
              return (0, _dump["default"])(configFile, loader.itemsRepo, quiet);
            });
          }

          _context2.next = 28;
          break;

        case 24:
          _context2.prev = 24;
          _context2.t1 = _context2["catch"](12);
          process.stderr.write(_context2.t1.message);
          process.exit(1);

        case 28:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[12, 24]]);
}