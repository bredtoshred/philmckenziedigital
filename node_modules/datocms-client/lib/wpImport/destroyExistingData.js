"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = destroyExistingData;

var _progress = require("./utils/progress");

function destroyExistingData(dato) {
  var itemTypes, itemTypesToDestroy, tick, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, itemType;

  return regeneratorRuntime.async(function destroyExistingData$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return regeneratorRuntime.awrap((0, _progress.spin)('Fetching existing data', dato.itemTypes.all()));

        case 2:
          itemTypes = _context.sent;
          itemTypesToDestroy = itemTypes.filter(function (it) {
            return ['author', 'category', 'tag', 'article', 'page'].includes(it.apiKey) || ['Author', 'Category', 'Tag', 'Article', 'Page'].includes(it.name);
          });
          tick = (0, _progress.progress)('Destroying existing authors, categories, tags, articles, pages', itemTypesToDestroy.length);
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context.prev = 8;
          _iterator = itemTypesToDestroy[Symbol.iterator]();

        case 10:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context.next = 17;
            break;
          }

          itemType = _step.value;
          _context.next = 14;
          return regeneratorRuntime.awrap(tick(itemType.id, dato.itemTypes.destroy(itemType.id)));

        case 14:
          _iteratorNormalCompletion = true;
          _context.next = 10;
          break;

        case 17:
          _context.next = 23;
          break;

        case 19:
          _context.prev = 19;
          _context.t0 = _context["catch"](8);
          _didIteratorError = true;
          _iteratorError = _context.t0;

        case 23:
          _context.prev = 23;
          _context.prev = 24;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 26:
          _context.prev = 26;

          if (!_didIteratorError) {
            _context.next = 29;
            break;
          }

          throw _iteratorError;

        case 29:
          return _context.finish(26);

        case 30:
          return _context.finish(23);

        case 31:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[8, 19, 23, 31], [24,, 26, 30]]);
}