"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spin = spin;
exports.progress = progress;

var _clui = require("clui");

var _ora = _interopRequireDefault(require("ora"));

var _truncate = _interopRequireDefault(require("truncate"));

var _safe = _interopRequireDefault(require("colors/safe"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function spin(label, promise) {
  var spinner, result;
  return regeneratorRuntime.async(function spin$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          spinner = (0, _ora["default"])(label).start();
          _context.next = 3;
          return regeneratorRuntime.awrap(promise);

        case 3:
          result = _context.sent;
          spinner.succeed();
          return _context.abrupt("return", result);

        case 6:
        case "end":
          return _context.stop();
      }
    }
  });
}

function progress(label, max) {
  if (max === 0) {
    return function () {};
  }

  var spinner = (0, _ora["default"])(label).start();
  var prog = new _clui.Progress(30);
  var i = 0;

  var tick = function tick(info, promise) {
    var newInfo, result;
    return regeneratorRuntime.async(function tick$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            newInfo = info.length > 0 ? _safe["default"].grey(" \u2014 ".concat((0, _truncate["default"])(info, 25))) : info;
            spinner.text = "".concat(label, " (").concat(i, "/").concat(max, ") ").concat(prog.update(i, max), " ").concat(newInfo);
            _context2.next = 4;
            return regeneratorRuntime.awrap(promise);

          case 4:
            result = _context2.sent;
            i += 1;
            spinner.text = "".concat(label, " (").concat(i, "/").concat(max, ") ").concat(prog.update(i, max), " ").concat(newInfo);

            if (i === max) {
              spinner.text = "".concat(label, " (").concat(i, "/").concat(max, ") ").concat(prog.update(i, max));
              spinner.succeed();
            }

            return _context2.abrupt("return", result);

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    });
  };

  return tick;
}