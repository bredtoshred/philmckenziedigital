"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = tags;

var _allPages = _interopRequireDefault(require("../utils/allPages"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _require = require('../utils/progress'),
    progress = _require.progress;

function tags(dato, wp, itemTypeId) {
  var mapping, resources, tick, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, tag;

  return regeneratorRuntime.async(function tags$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          mapping = {};
          _context.next = 3;
          return regeneratorRuntime.awrap((0, _allPages["default"])('Fetching tags', wp.tags()));

        case 3:
          resources = _context.sent;
          tick = progress('Creating tags', resources.length);
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context.prev = 8;
          _iterator = resources[Symbol.iterator]();

        case 10:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context.next = 18;
            break;
          }

          tag = _step.value;
          _context.next = 14;
          return regeneratorRuntime.awrap(tick(tag.name, dato.items.create({
            itemType: itemTypeId,
            name: tag.name,
            slug: tag.slug
          })));

        case 14:
          mapping[tag.id] = _context.sent.id;

        case 15:
          _iteratorNormalCompletion = true;
          _context.next = 10;
          break;

        case 18:
          _context.next = 24;
          break;

        case 20:
          _context.prev = 20;
          _context.t0 = _context["catch"](8);
          _didIteratorError = true;
          _iteratorError = _context.t0;

        case 24:
          _context.prev = 24;
          _context.prev = 25;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 27:
          _context.prev = 27;

          if (!_didIteratorError) {
            _context.next = 30;
            break;
          }

          throw _iteratorError;

        case 30:
          return _context.finish(27);

        case 31:
          return _context.finish(24);

        case 32:
          return _context.abrupt("return", mapping);

        case 33:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[8, 20, 24, 32], [25,, 27, 31]]);
}