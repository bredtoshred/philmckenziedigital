"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = articles;

var _escapeStringRegexp = _interopRequireDefault(require("escape-string-regexp"));

var _allPages = _interopRequireDefault(require("../utils/allPages"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _require = require('../utils/progress'),
    progress = _require.progress;

function articles(dato, wp, schema, media, categories, tags, authors) {
  var resources, tick, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;

  return regeneratorRuntime.async(function articles$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return regeneratorRuntime.awrap((0, _allPages["default"])('Fetching articles', wp.posts()));

        case 2:
          resources = _context3.sent;
          tick = progress('Creating articles', resources.length);
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context3.prev = 7;

          _loop = function _loop() {
            var article, newCategories, newTags, createAndPublish;
            return regeneratorRuntime.async(function _loop$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    article = _step.value;
                    newCategories = article.categories.map(function (id) {
                      return categories[id];
                    });
                    newTags = article.tags.map(function (id) {
                      return tags[id];
                    });

                    createAndPublish = function createAndPublish() {
                      var itemData, newItem;
                      return regeneratorRuntime.async(function createAndPublish$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              itemData = {
                                itemType: schema.articleId,
                                title: article.title.rendered,
                                slug: article.slug,
                                content: Object.entries(media.urls).reduce(function (acc, _ref) {
                                  var _ref2 = _slicedToArray(_ref, 2),
                                      k = _ref2[0],
                                      v = _ref2[1];

                                  return acc.replace(new RegExp((0, _escapeStringRegexp["default"])(k), 'ig'), v);
                                }, article.content.rendered),
                                excerpt: Object.entries(media.urls).reduce(function (acc, _ref3) {
                                  var _ref4 = _slicedToArray(_ref3, 2),
                                      k = _ref4[0],
                                      v = _ref4[1];

                                  return acc.replace(new RegExp((0, _escapeStringRegexp["default"])(k), 'ig'), v);
                                }, article.excerpt.rendered),
                                date: article.date,
                                author: authors[article.author],
                                categories: newCategories,
                                tags: newTags,
                                featuredMedia: null
                              };

                              if (media.ids[article.featured_media]) {
                                itemData.featuredMedia = {
                                  uploadId: media.ids[article.featured_media],
                                  title: article.title.rendered,
                                  alt: article.title.rendered,
                                  customData: {}
                                };
                              }

                              ;
                              _context.next = 5;
                              return regeneratorRuntime.awrap(dato.items.create(itemData));

                            case 5:
                              newItem = _context.sent;

                              if (!(article.status === 'publish' || article.status === 'future')) {
                                _context.next = 9;
                                break;
                              }

                              _context.next = 9;
                              return regeneratorRuntime.awrap(dato.items.publish(newItem.id));

                            case 9:
                            case "end":
                              return _context.stop();
                          }
                        }
                      });
                    };

                    _context2.next = 6;
                    return regeneratorRuntime.awrap(tick(article.title.rendered, createAndPublish()));

                  case 6:
                  case "end":
                    return _context2.stop();
                }
              }
            });
          };

          _iterator = resources[Symbol.iterator]();

        case 10:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context3.next = 16;
            break;
          }

          _context3.next = 13;
          return regeneratorRuntime.awrap(_loop());

        case 13:
          _iteratorNormalCompletion = true;
          _context3.next = 10;
          break;

        case 16:
          _context3.next = 22;
          break;

        case 18:
          _context3.prev = 18;
          _context3.t0 = _context3["catch"](7);
          _didIteratorError = true;
          _iteratorError = _context3.t0;

        case 22:
          _context3.prev = 22;
          _context3.prev = 23;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 25:
          _context3.prev = 25;

          if (!_didIteratorError) {
            _context3.next = 28;
            break;
          }

          throw _iteratorError;

        case 28:
          return _context3.finish(25);

        case 29:
          return _context3.finish(22);

        case 30:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, [[7, 18, 22, 30], [23,, 25, 29]]);
}