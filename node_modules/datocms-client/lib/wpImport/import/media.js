"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = media;

var _allPages = _interopRequireDefault(require("../utils/allPages"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _require = require('../utils/progress'),
    progress = _require.progress;

function media(dato, wp) {
  var ids, urls, mediaItems, tick, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;

  return regeneratorRuntime.async(function media$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          ids = {};
          urls = {};
          _context3.next = 4;
          return regeneratorRuntime.awrap((0, _allPages["default"])('Fetching media', wp.media()));

        case 4:
          mediaItems = _context3.sent;
          tick = progress('Creating media', mediaItems.length);
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context3.prev = 9;

          _loop = function _loop() {
            var mediaItem, create;
            return regeneratorRuntime.async(function _loop$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    mediaItem = _step.value;

                    create = function create() {
                      var mediaItemUrl, path, upload, _i, _Object$keys, thumbName, _mediaItem$media_deta, width, height, sourceUrl;

                      return regeneratorRuntime.async(function create$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              mediaItemUrl = mediaItem.source_url;
                              _context.prev = 1;
                              _context.next = 4;
                              return regeneratorRuntime.awrap(dato.createUploadPath(mediaItemUrl));

                            case 4:
                              path = _context.sent;
                              _context.next = 7;
                              return regeneratorRuntime.awrap(dato.uploads.create({
                                path: path,
                                author: null,
                                copyright: null,
                                defaultFieldMetadata: {
                                  en: {
                                    title: mediaItem.title.rendered,
                                    alt: mediaItem.alt_text,
                                    customData: {}
                                  }
                                }
                              }));

                            case 7:
                              upload = _context.sent;
                              ids[mediaItem.id] = upload.id;
                              urls[mediaItemUrl] = upload.url;

                              if (mediaItem.media_details && mediaItem.media_details.sizes) {
                                for (_i = 0, _Object$keys = Object.keys(mediaItem.media_details.sizes); _i < _Object$keys.length; _i++) {
                                  thumbName = _Object$keys[_i];
                                  _mediaItem$media_deta = mediaItem.media_details.sizes[thumbName], width = _mediaItem$media_deta.width, height = _mediaItem$media_deta.height, sourceUrl = _mediaItem$media_deta.source_url;
                                  urls[sourceUrl] = "".concat(upload.url, "?w=").concat(width, "&h=").concat(height, "&fit=crop");
                                }
                              }

                              _context.next = 17;
                              break;

                            case 13:
                              _context.prev = 13;
                              _context.t0 = _context["catch"](1);
                              console.log("Cannot import: ".concat(mediaItemUrl));
                              console.log(_context.t0);

                            case 17:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, null, null, [[1, 13]]);
                    };

                    _context2.next = 4;
                    return regeneratorRuntime.awrap(tick(mediaItem.title.rendered, create()));

                  case 4:
                  case "end":
                    return _context2.stop();
                }
              }
            });
          };

          _iterator = mediaItems[Symbol.iterator]();

        case 12:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context3.next = 18;
            break;
          }

          _context3.next = 15;
          return regeneratorRuntime.awrap(_loop());

        case 15:
          _iteratorNormalCompletion = true;
          _context3.next = 12;
          break;

        case 18:
          _context3.next = 24;
          break;

        case 20:
          _context3.prev = 20;
          _context3.t0 = _context3["catch"](9);
          _didIteratorError = true;
          _iteratorError = _context3.t0;

        case 24:
          _context3.prev = 24;
          _context3.prev = 25;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 27:
          _context3.prev = 27;

          if (!_didIteratorError) {
            _context3.next = 30;
            break;
          }

          throw _iteratorError;

        case 30:
          return _context3.finish(27);

        case 31:
          return _context3.finish(24);

        case 32:
          return _context3.abrupt("return", {
            ids: ids,
            urls: urls
          });

        case 33:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, [[9, 20, 24, 32], [25,, 27, 31]]);
}