"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ora = _interopRequireDefault(require("ora"));

var _progress = _interopRequireDefault(require("./progress"));

var _toApiKey = require("./toApiKey");

var _datoFieldTypeFor = _interopRequireDefault(require("./datoFieldTypeFor"));

var _datoLinkItemTypeFor = _interopRequireDefault(require("./datoLinkItemTypeFor"));

var _delay = _interopRequireDefault(require("./delay"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* eslint-disable no-constant-condition */
var _callee = function _callee(_ref) {
  var itemTypes, datoClient, contentfulData, spinner, contentTypes, fieldSize, progress, fieldsMapping, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;

  return regeneratorRuntime.async(function _callee$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          itemTypes = _ref.itemTypes, datoClient = _ref.datoClient, contentfulData = _ref.contentfulData;
          spinner = (0, _ora["default"])('').start();
          contentTypes = contentfulData.contentTypes;
          fieldSize = contentTypes.map(function (contentType) {
            return contentType.fields.length;
          }).reduce(function (acc, length) {
            return acc + length;
          }, 0);
          progress = new _progress["default"](fieldSize, 'Creating fields');
          spinner.text = progress.tick();
          fieldsMapping = {};
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context2.prev = 10;

          _loop = function _loop() {
            var contentType, contentTypeApiKey, itemType, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, contentfulField, position, validators, fieldAttributes, datoField;

            return regeneratorRuntime.async(function _loop$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    contentType = _step.value;
                    contentTypeApiKey = (0, _toApiKey.toItemApiKey)(contentType.sys.id);
                    fieldsMapping[contentTypeApiKey] = [];
                    itemType = itemTypes.find(function (iT) {
                      return iT.apiKey === contentTypeApiKey;
                    });
                    _iteratorNormalCompletion2 = true;
                    _didIteratorError2 = false;
                    _iteratorError2 = undefined;
                    _context.prev = 7;
                    _iterator2 = contentType.fields[Symbol.iterator]();

                  case 9:
                    if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                      _context.next = 41;
                      break;
                    }

                    contentfulField = _step2.value;
                    position = contentType.fields.indexOf(contentfulField);
                    validators = {};

                    if (contentfulField.type === 'Link' && contentfulField.linkType === 'Entry') {
                      validators = {
                        itemItemType: {
                          itemTypes: (0, _datoLinkItemTypeFor["default"])({
                            itemTypes: itemTypes,
                            field: contentfulField
                          })
                        }
                      };
                    }

                    if (contentfulField.type === 'Array' && contentfulField.items.type === 'Link' && contentfulField.items.linkType === 'Entry') {
                      validators = {
                        itemsItemType: {
                          itemTypes: (0, _datoLinkItemTypeFor["default"])({
                            itemTypes: itemTypes,
                            field: contentfulField.items
                          })
                        }
                      };
                    }

                    fieldAttributes = {
                      label: contentfulField.name,
                      fieldType: (0, _datoFieldTypeFor["default"])(contentfulField),
                      localized: contentfulField.localized,
                      apiKey: (0, _toApiKey.toFieldApiKey)(contentfulField.id),
                      position: position,
                      validators: validators
                    };

                    if (contentfulField.id === contentType.displayField && contentfulField.type === 'Symbol') {
                      fieldAttributes.appeareance = {
                        editor: 'single_line',
                        parameters: {
                          heading: true
                        },
                        addons: []
                      };
                    }

                  case 17:
                    if (!true) {
                      _context.next = 38;
                      break;
                    }

                    _context.prev = 18;
                    _context.next = 21;
                    return regeneratorRuntime.awrap(datoClient.fields.create(itemType.id, fieldAttributes));

                  case 21:
                    datoField = _context.sent;
                    spinner.text = progress.tick();
                    fieldsMapping[contentTypeApiKey].push(datoField);
                    return _context.abrupt("break", 38);

                  case 27:
                    _context.prev = 27;
                    _context.t0 = _context["catch"](18);

                    if (!(!_context.t0.body || !_context.t0.body.data || !_context.t0.body.data.some(function (d) {
                      return d.id === 'BATCH_DATA_VALIDATION_IN_PROGRESS';
                    }))) {
                      _context.next = 34;
                      break;
                    }

                    spinner.fail(_context.t0);
                    process.exit();
                    _context.next = 36;
                    break;

                  case 34:
                    _context.next = 36;
                    return regeneratorRuntime.awrap((0, _delay["default"])(1000));

                  case 36:
                    _context.next = 17;
                    break;

                  case 38:
                    _iteratorNormalCompletion2 = true;
                    _context.next = 9;
                    break;

                  case 41:
                    _context.next = 47;
                    break;

                  case 43:
                    _context.prev = 43;
                    _context.t1 = _context["catch"](7);
                    _didIteratorError2 = true;
                    _iteratorError2 = _context.t1;

                  case 47:
                    _context.prev = 47;
                    _context.prev = 48;

                    if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                      _iterator2["return"]();
                    }

                  case 50:
                    _context.prev = 50;

                    if (!_didIteratorError2) {
                      _context.next = 53;
                      break;
                    }

                    throw _iteratorError2;

                  case 53:
                    return _context.finish(50);

                  case 54:
                    return _context.finish(47);

                  case 55:
                  case "end":
                    return _context.stop();
                }
              }
            }, null, null, [[7, 43, 47, 55], [18, 27], [48,, 50, 54]]);
          };

          _iterator = contentTypes[Symbol.iterator]();

        case 13:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context2.next = 19;
            break;
          }

          _context2.next = 16;
          return regeneratorRuntime.awrap(_loop());

        case 16:
          _iteratorNormalCompletion = true;
          _context2.next = 13;
          break;

        case 19:
          _context2.next = 25;
          break;

        case 21:
          _context2.prev = 21;
          _context2.t0 = _context2["catch"](10);
          _didIteratorError = true;
          _iteratorError = _context2.t0;

        case 25:
          _context2.prev = 25;
          _context2.prev = 26;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 28:
          _context2.prev = 28;

          if (!_didIteratorError) {
            _context2.next = 31;
            break;
          }

          throw _iteratorError;

        case 31:
          return _context2.finish(28);

        case 32:
          return _context2.finish(25);

        case 33:
          spinner.succeed();
          return _context2.abrupt("return", fieldsMapping);

        case 35:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[10, 21, 25, 33], [26,, 28, 32]]);
};

exports["default"] = _callee;