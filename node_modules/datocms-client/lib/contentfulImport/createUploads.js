"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ora = _interopRequireDefault(require("ora"));

var _progress = _interopRequireDefault(require("./progress"));

var _toApiKey = require("./toApiKey");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('humps'),
    camelize = _require.camelize;

function uploadData(id) {
  if (!id) {
    return null;
  }

  return {
    uploadId: id,
    alt: null,
    title: null,
    customData: {}
  };
}

;

var _callee = function _callee(_ref) {
  var fieldsMapping, datoClient, contentfulData, contentfulRecordMap, spinner, entries, assets, progress, contentfulAssetsMap, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, entry, datoItemId, recordAttributes, _loop2, _i, _Object$keys;

  return regeneratorRuntime.async(function _callee$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          fieldsMapping = _ref.fieldsMapping, datoClient = _ref.datoClient, contentfulData = _ref.contentfulData, contentfulRecordMap = _ref.contentfulRecordMap;
          spinner = (0, _ora["default"])('').start();
          entries = contentfulData.entries, assets = contentfulData.assets;
          progress = new _progress["default"](assets.length, 'Uploading assets');
          spinner.text = progress.tick();
          contentfulAssetsMap = {};
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context2.prev = 9;

          _loop = function _loop() {
            var asset, fileAttributes, fileUrl, path, defaultFieldMetadata, upload;
            return regeneratorRuntime.async(function _loop$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    asset = _step.value;

                    if (!(asset.fields && asset.fields.file)) {
                      _context.next = 22;
                      break;
                    }

                    fileAttributes = asset.fields.file[contentfulData.defaultLocale];
                    fileUrl = "https:".concat(fileAttributes.url);
                    _context.prev = 4;
                    _context.next = 7;
                    return regeneratorRuntime.awrap(datoClient.createUploadPath(fileUrl));

                  case 7:
                    path = _context.sent;
                    defaultFieldMetadata = contentfulData.locales.reduce(function (acc, locale) {
                      return Object.assign(acc, _defineProperty({}, locale, {
                        title: asset.fields.title[locale],
                        alt: asset.fields.title[locale],
                        customData: {}
                      }));
                    }, {});
                    _context.next = 11;
                    return regeneratorRuntime.awrap(datoClient.uploads.create({
                      path: path,
                      author: null,
                      copyright: null,
                      defaultFieldMetadata: defaultFieldMetadata
                    }));

                  case 11:
                    upload = _context.sent;
                    contentfulAssetsMap[asset.sys.id.toString()] = upload.id;
                    spinner.text = progress.tick();
                    _context.next = 20;
                    break;

                  case 16:
                    _context.prev = 16;
                    _context.t0 = _context["catch"](4);

                    if (_context.t0.body && _context.t0.body.data && _context.t0.body.data.some(function (d) {
                      return d.id === 'FILE_STORAGE_QUOTA_EXCEEDED';
                    })) {
                      spinner.fail("You've reached your site's plan storage limit: upgrade to complete the import");
                    } else {
                      console.log(_context.t0);
                      spinner.fail(_context.t0);
                    }

                    process.exit();

                  case 20:
                    _context.next = 23;
                    break;

                  case 22:
                    spinner.text = progress.tick();

                  case 23:
                  case "end":
                    return _context.stop();
                }
              }
            }, null, null, [[4, 16]]);
          };

          _iterator = assets[Symbol.iterator]();

        case 12:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context2.next = 18;
            break;
          }

          _context2.next = 15;
          return regeneratorRuntime.awrap(_loop());

        case 15:
          _iteratorNormalCompletion = true;
          _context2.next = 12;
          break;

        case 18:
          _context2.next = 24;
          break;

        case 20:
          _context2.prev = 20;
          _context2.t0 = _context2["catch"](9);
          _didIteratorError = true;
          _iteratorError = _context2.t0;

        case 24:
          _context2.prev = 24;
          _context2.prev = 25;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 27:
          _context2.prev = 27;

          if (!_didIteratorError) {
            _context2.next = 30;
            break;
          }

          throw _iteratorError;

        case 30:
          return _context2.finish(27);

        case 31:
          return _context2.finish(24);

        case 32:
          spinner.succeed();
          spinner = (0, _ora["default"])('').start();
          progress = new _progress["default"](entries.length, 'Linking assets to records');
          spinner.text = progress.tick();
          _iteratorNormalCompletion2 = true;
          _didIteratorError2 = false;
          _iteratorError2 = undefined;
          _context2.prev = 39;
          _iterator2 = entries[Symbol.iterator]();

        case 41:
          if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
            _context2.next = 61;
            break;
          }

          entry = _step2.value;
          datoItemId = contentfulRecordMap[entry.sys.id];
          recordAttributes = {};
          _context2.prev = 45;

          _loop2 = function _loop2() {
            var key = _Object$keys[_i];
            var entryFieldValue = entry.fields[key];
            var contentTypeApiKey = (0, _toApiKey.toItemApiKey)(entry.sys.contentType.sys.id);
            var apiKey = (0, _toApiKey.toFieldApiKey)(key);
            var field = fieldsMapping[contentTypeApiKey].find(function (f) {
              return f.apiKey === apiKey;
            });
            var fileFieldAttributes = null;

            if (field.fieldType === 'file' || field.fieldType === 'gallery') {
              if (field.localized) {
                var localizedValue = Object.keys(entryFieldValue).reduce(function (innerAcc, locale) {
                  var innerValue = entryFieldValue[locale];

                  if (field.fieldType === 'file') {
                    return Object.assign(innerAcc, _defineProperty({}, locale, uploadData(contentfulAssetsMap[innerValue.sys.id])));
                  }

                  return Object.assign(innerAcc, _defineProperty({}, locale, innerValue.map(function (link) {
                    return uploadData(contentfulAssetsMap[link.sys.id]);
                  }).filter(function (v) {
                    return !!v;
                  })));
                }, {});
                var fallbackValues = contentfulData.locales.reduce(function (innerAcc, locale) {
                  return Object.assign(innerAcc, _defineProperty({}, locale, localizedValue[contentfulData.defaultLocale]));
                }, {});
                recordAttributes = Object.assign(recordAttributes, _defineProperty({}, camelize(apiKey), _objectSpread({}, fallbackValues, {}, localizedValue)));
              } else {
                var innerValue = entryFieldValue[contentfulData.defaultLocale];

                switch (field.fieldType) {
                  case 'file':
                    fileFieldAttributes = uploadData(contentfulAssetsMap[innerValue.sys.id]);
                    break;

                  case 'gallery':
                    fileFieldAttributes = innerValue.map(function (link) {
                      return uploadData(contentfulAssetsMap[link.sys.id]);
                    }).filter(function (v) {
                      return !!v;
                    });
                    break;

                  default:
                    break;
                }

                recordAttributes = Object.assign(recordAttributes, _defineProperty({}, camelize(apiKey), fileFieldAttributes));
              }
            }
          };

          for (_i = 0, _Object$keys = Object.keys(entry.fields); _i < _Object$keys.length; _i++) {
            _loop2();
          }

          _context2.next = 50;
          return regeneratorRuntime.awrap(datoClient.items.update(datoItemId, recordAttributes));

        case 50:
          spinner.text = progress.tick();
          _context2.next = 58;
          break;

        case 53:
          _context2.prev = 53;
          _context2.t1 = _context2["catch"](45);
          console.log(_context2.t1);
          spinner.fail(_context2.t1);
          process.exit();

        case 58:
          _iteratorNormalCompletion2 = true;
          _context2.next = 41;
          break;

        case 61:
          _context2.next = 67;
          break;

        case 63:
          _context2.prev = 63;
          _context2.t2 = _context2["catch"](39);
          _didIteratorError2 = true;
          _iteratorError2 = _context2.t2;

        case 67:
          _context2.prev = 67;
          _context2.prev = 68;

          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }

        case 70:
          _context2.prev = 70;

          if (!_didIteratorError2) {
            _context2.next = 73;
            break;
          }

          throw _iteratorError2;

        case 73:
          return _context2.finish(70);

        case 74:
          return _context2.finish(67);

        case 75:
          spinner.succeed();

        case 76:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[9, 20, 24, 32], [25,, 27, 31], [39, 63, 67, 75], [45, 53], [68,, 70, 74]]);
};

exports["default"] = _callee;