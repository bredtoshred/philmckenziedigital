"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _appClient = _interopRequireDefault(require("./appClient"));

var _getContentfulData = _interopRequireDefault(require("./getContentfulData"));

var _destroyExistingModels = _interopRequireDefault(require("./destroyExistingModels"));

var _destroyExistingAssets = _interopRequireDefault(require("./destroyExistingAssets"));

var _removeAllValidators = _interopRequireDefault(require("./removeAllValidators"));

var _setLocales = _interopRequireDefault(require("./setLocales"));

var _createModels = _interopRequireDefault(require("./createModels"));

var _createFields = _interopRequireDefault(require("./createFields"));

var _createRecords = _interopRequireDefault(require("./createRecords"));

var _addValidationsOnField = _interopRequireDefault(require("./addValidationsOnField"));

var _linkRecords = _interopRequireDefault(require("./linkRecords"));

var _createUploads = _interopRequireDefault(require("./createUploads"));

var _publishRecords = _interopRequireDefault(require("./publishRecords"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _callee = function _callee(contentfulToken, contentfulSpaceId, datoCmsToken, skipContent) {
  var client, datoClient, contentfulData, itemTypes, fieldsMapping, _ref, contentfulRecordMap, recordsToPublish, linkedRecords;

  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return regeneratorRuntime.awrap((0, _appClient["default"])(contentfulToken, contentfulSpaceId, datoCmsToken));

        case 2:
          client = _context.sent;
          datoClient = client.dato;
          _context.next = 6;
          return regeneratorRuntime.awrap((0, _getContentfulData["default"])(client.contentful, skipContent));

        case 6:
          contentfulData = _context.sent;
          _context.next = 9;
          return regeneratorRuntime.awrap((0, _removeAllValidators["default"])({
            datoClient: datoClient,
            contentfulData: contentfulData
          }));

        case 9:
          _context.next = 11;
          return regeneratorRuntime.awrap((0, _destroyExistingModels["default"])({
            datoClient: datoClient,
            contentfulData: contentfulData
          }));

        case 11:
          _context.next = 13;
          return regeneratorRuntime.awrap((0, _destroyExistingAssets["default"])({
            datoClient: datoClient
          }));

        case 13:
          _context.next = 15;
          return regeneratorRuntime.awrap((0, _setLocales["default"])({
            datoClient: datoClient,
            contentfulData: contentfulData
          }));

        case 15:
          _context.next = 17;
          return regeneratorRuntime.awrap((0, _createModels["default"])({
            datoClient: datoClient,
            contentfulData: contentfulData
          }));

        case 17:
          itemTypes = _context.sent;
          _context.next = 20;
          return regeneratorRuntime.awrap((0, _createFields["default"])({
            itemTypes: itemTypes,
            datoClient: datoClient,
            contentfulData: contentfulData
          }));

        case 20:
          fieldsMapping = _context.sent;

          if (skipContent) {
            _context.next = 36;
            break;
          }

          _context.next = 24;
          return regeneratorRuntime.awrap((0, _createRecords["default"])({
            itemTypes: itemTypes,
            fieldsMapping: fieldsMapping,
            datoClient: datoClient,
            contentfulData: contentfulData
          }));

        case 24:
          _ref = _context.sent;
          contentfulRecordMap = _ref.contentfulRecordMap;
          recordsToPublish = _ref.recordsToPublish;
          _context.next = 29;
          return regeneratorRuntime.awrap((0, _createUploads["default"])({
            fieldsMapping: fieldsMapping,
            itemTypes: itemTypes,
            datoClient: datoClient,
            contentfulData: contentfulData,
            contentfulRecordMap: contentfulRecordMap
          }));

        case 29:
          _context.next = 31;
          return regeneratorRuntime.awrap((0, _publishRecords["default"])({
            recordIds: recordsToPublish,
            datoClient: datoClient
          }));

        case 31:
          _context.next = 33;
          return regeneratorRuntime.awrap((0, _linkRecords["default"])({
            fieldsMapping: fieldsMapping,
            datoClient: datoClient,
            contentfulData: contentfulData,
            contentfulRecordMap: contentfulRecordMap
          }));

        case 33:
          linkedRecords = _context.sent;
          _context.next = 36;
          return regeneratorRuntime.awrap((0, _publishRecords["default"])({
            recordIds: linkedRecords,
            datoClient: datoClient
          }));

        case 36:
          _context.next = 38;
          return regeneratorRuntime.awrap((0, _addValidationsOnField["default"])({
            itemTypes: itemTypes,
            fieldsMapping: fieldsMapping,
            datoClient: datoClient,
            contentfulData: contentfulData
          }));

        case 38:
        case "end":
          return _context.stop();
      }
    }
  });
};

exports["default"] = _callee;