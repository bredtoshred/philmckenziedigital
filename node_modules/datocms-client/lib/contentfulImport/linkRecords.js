"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ora = _interopRequireDefault(require("ora"));

var _progress = _interopRequireDefault(require("./progress"));

var _toApiKey = require("./toApiKey");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _require = require('humps'),
    camelize = _require.camelize;

var _callee = function _callee(_ref) {
  var fieldsMapping, datoClient, contentfulData, contentfulRecordMap, spinner, entries, progress, recordsToPublish, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;

  return regeneratorRuntime.async(function _callee$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          fieldsMapping = _ref.fieldsMapping, datoClient = _ref.datoClient, contentfulData = _ref.contentfulData, contentfulRecordMap = _ref.contentfulRecordMap;
          spinner = (0, _ora["default"])('').start();
          entries = contentfulData.entries;
          progress = new _progress["default"](entries.length, 'Linking records');
          recordsToPublish = [];
          spinner.text = progress.tick();
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context2.prev = 9;

          _loop = function _loop() {
            var entry, contentType, contentTypeApiKey, datoItemId, itemTypeFields, recordAttributes;
            return regeneratorRuntime.async(function _loop$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    entry = _step.value;
                    contentType = entry.sys.contentType;
                    contentTypeApiKey = (0, _toApiKey.toItemApiKey)(contentType.sys.id);
                    datoItemId = contentfulRecordMap[entry.sys.id];
                    itemTypeFields = fieldsMapping[contentTypeApiKey];
                    recordAttributes = Object.entries(entry.fields).reduce(function (outerAcc, _ref2) {
                      var _ref3 = _slicedToArray(_ref2, 2),
                          option = _ref3[0],
                          value = _ref3[1];

                      var apiKey = (0, _toApiKey.toFieldApiKey)(option);
                      var field = itemTypeFields.find(function (itemTypefield) {
                        return itemTypefield.apiKey === apiKey;
                      });

                      if (field.fieldType !== 'link' && field.fieldType !== 'links') {
                        return outerAcc;
                      }

                      if (field.localized) {
                        var localizedValue = Object.keys(value).reduce(function (innerAcc, locale) {
                          var innerValue = value[locale];

                          if (field.fieldType === 'link') {
                            return Object.assign(innerAcc, _defineProperty({}, locale, contentfulRecordMap[innerValue.sys.id]));
                          }

                          return Object.assign(innerAcc, _defineProperty({}, locale, innerValue.filter(function (link) {
                            return contentfulRecordMap[link.sys.id];
                          }).map(function (link) {
                            return contentfulRecordMap[link.sys.id];
                          })));
                        }, {});
                        var fallbackValues = contentfulData.locales.reduce(function (accLocales, locale) {
                          return Object.assign(accLocales, _defineProperty({}, locale, localizedValue[contentfulData.defaultLocale]));
                        }, {});
                        return Object.assign(outerAcc, _defineProperty({}, camelize(apiKey), _objectSpread({}, fallbackValues, {}, localizedValue)));
                      }

                      var innerValue = value[contentfulData.defaultLocale];

                      if (field.fieldType === 'link') {
                        return Object.assign(outerAcc, _defineProperty({}, camelize(apiKey), contentfulRecordMap[innerValue.sys.id]));
                      }

                      return Object.assign(outerAcc, _defineProperty({}, camelize(apiKey), innerValue.filter(function (link) {
                        return contentfulRecordMap[link.sys.id];
                      }).map(function (link) {
                        return contentfulRecordMap[link.sys.id];
                      })));
                    }, {});
                    _context.prev = 6;

                    if (!(Object.entries(recordAttributes).length > 0)) {
                      _context.next = 11;
                      break;
                    }

                    _context.next = 10;
                    return regeneratorRuntime.awrap(datoClient.items.update(datoItemId, recordAttributes));

                  case 10:
                    if (entry.sys.publishedVersion) {
                      recordsToPublish.push(datoItemId);
                    }

                  case 11:
                    spinner.text = progress.tick();
                    _context.next = 18;
                    break;

                  case 14:
                    _context.prev = 14;
                    _context.t0 = _context["catch"](6);
                    spinner.fail(_context.t0);
                    process.exit();

                  case 18:
                    spinner.text = progress.tick();

                  case 19:
                  case "end":
                    return _context.stop();
                }
              }
            }, null, null, [[6, 14]]);
          };

          _iterator = entries[Symbol.iterator]();

        case 12:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context2.next = 18;
            break;
          }

          _context2.next = 15;
          return regeneratorRuntime.awrap(_loop());

        case 15:
          _iteratorNormalCompletion = true;
          _context2.next = 12;
          break;

        case 18:
          _context2.next = 24;
          break;

        case 20:
          _context2.prev = 20;
          _context2.t0 = _context2["catch"](9);
          _didIteratorError = true;
          _iteratorError = _context2.t0;

        case 24:
          _context2.prev = 24;
          _context2.prev = 25;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 27:
          _context2.prev = 27;

          if (!_didIteratorError) {
            _context2.next = 30;
            break;
          }

          throw _iteratorError;

        case 30:
          return _context2.finish(27);

        case 31:
          return _context2.finish(24);

        case 32:
          spinner.succeed();
          return _context2.abrupt("return", recordsToPublish);

        case 34:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[9, 20, 24, 32], [25,, 27, 31]]);
};

exports["default"] = _callee;