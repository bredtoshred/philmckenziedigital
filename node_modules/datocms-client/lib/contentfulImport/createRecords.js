"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ora = _interopRequireDefault(require("ora"));

var _progress = _interopRequireDefault(require("./progress"));

var _toApiKey = require("./toApiKey");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('humps'),
    camelize = _require.camelize;

var _callee = function _callee(_ref) {
  var itemTypes, fieldsMapping, datoClient, contentfulData, spinner, entries, progress, contentfulRecordMap, recordsToPublish, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;

  return regeneratorRuntime.async(function _callee$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          itemTypes = _ref.itemTypes, fieldsMapping = _ref.fieldsMapping, datoClient = _ref.datoClient, contentfulData = _ref.contentfulData;
          spinner = (0, _ora["default"])('').start();
          entries = contentfulData.entries;
          progress = new _progress["default"](entries.length, 'Creating records');
          contentfulRecordMap = {};
          recordsToPublish = [];
          spinner.text = progress.tick();
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context2.prev = 10;

          _loop = function _loop() {
            var entry, contentType, contentTypeApiKey, itemType, itemTypeFields, emptyFieldValues, recordAttributes, record;
            return regeneratorRuntime.async(function _loop$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    entry = _step.value;
                    contentType = entry.sys.contentType;
                    contentTypeApiKey = (0, _toApiKey.toItemApiKey)(contentType.sys.id);
                    itemType = itemTypes.find(function (iT) {
                      return iT.apiKey === contentTypeApiKey;
                    });
                    itemTypeFields = fieldsMapping[contentTypeApiKey];

                    if (!itemType) {
                      _context.next = 21;
                      break;
                    }

                    emptyFieldValues = itemTypeFields.reduce(function (accFields, field) {
                      if (field.localized) {
                        var value = contentfulData.locales.map(function (locale) {
                          return locale;
                        }).reduce(function (accLocales, locale) {
                          return Object.assign(accLocales, _defineProperty({}, locale, null));
                        }, {});
                        return Object.assign(accFields, _defineProperty({}, camelize(field.apiKey), value));
                      }

                      return Object.assign(accFields, _defineProperty({}, camelize(field.apiKey), null));
                    }, {});
                    recordAttributes = Object.entries(entry.fields).reduce(function (acc, _ref2) {
                      var _ref3 = _slicedToArray(_ref2, 2),
                          option = _ref3[0],
                          value = _ref3[1];

                      var apiKey = (0, _toApiKey.toFieldApiKey)(option);
                      var field = itemTypeFields.find(function (f) {
                        return f.apiKey === apiKey;
                      });

                      switch (field.fieldType) {
                        case 'link':
                        case 'links':
                        case 'file':
                        case 'gallery':
                          return acc;

                        default:
                          break;
                      }

                      if (field.localized) {
                        var localizedValue = Object.keys(value).reduce(function (innerAcc, locale) {
                          var innerValue = value[locale];

                          if (field.fieldType === 'lat_lon') {
                            innerValue = {
                              latitude: innerValue.lat,
                              longitude: innerValue.lon
                            };
                          }

                          if (field.fieldType === 'string' && Array.isArray(innerValue)) {
                            innerValue = innerValue.join(', ');
                          }

                          if (field.fieldType === 'json') {
                            innerValue = JSON.stringify(innerValue, null, 2);
                          }

                          return Object.assign(innerAcc, _defineProperty({}, locale, innerValue));
                        }, {});
                        var fallbackValues = contentfulData.locales.reduce(function (accLocales, locale) {
                          return Object.assign(accLocales, _defineProperty({}, locale, localizedValue[contentfulData.defaultLocale]));
                        }, {});
                        return Object.assign(acc, _defineProperty({}, camelize(apiKey), _objectSpread({}, fallbackValues, {}, localizedValue)));
                      }

                      var innerValue = value[contentfulData.defaultLocale];

                      if (field.fieldType === 'lat_lon') {
                        innerValue = {
                          latitude: innerValue.lat,
                          longitude: innerValue.lon
                        };
                      }

                      if (field.fieldType === 'string' && Array.isArray(innerValue)) {
                        innerValue = innerValue.join(', ');
                      }

                      if (field.fieldType === 'json') {
                        innerValue = JSON.stringify(innerValue, null, 2);
                      }

                      return Object.assign(acc, _defineProperty({}, camelize(apiKey), innerValue));
                    }, emptyFieldValues);
                    _context.prev = 8;
                    _context.next = 11;
                    return regeneratorRuntime.awrap(datoClient.items.create(_objectSpread({}, recordAttributes, {
                      itemType: itemType.id.toString()
                    })));

                  case 11:
                    record = _context.sent;

                    if (entry.sys.publishedVersion) {
                      recordsToPublish.push(record.id);
                    }

                    spinner.text = progress.tick();
                    contentfulRecordMap[entry.sys.id] = record.id;
                    _context.next = 21;
                    break;

                  case 17:
                    _context.prev = 17;
                    _context.t0 = _context["catch"](8);

                    if (_context.t0.body && _context.t0.body.data && _context.t0.body.data.some(function (d) {
                      return d.id === 'ITEMS_QUOTA_EXCEEDED';
                    })) {
                      spinner.fail("You've reached your site's plan record limit: upgrade to complete the import");
                    } else {
                      spinner.fail(_context.t0);
                    }

                    process.exit();

                  case 21:
                  case "end":
                    return _context.stop();
                }
              }
            }, null, null, [[8, 17]]);
          };

          _iterator = entries[Symbol.iterator]();

        case 13:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context2.next = 19;
            break;
          }

          _context2.next = 16;
          return regeneratorRuntime.awrap(_loop());

        case 16:
          _iteratorNormalCompletion = true;
          _context2.next = 13;
          break;

        case 19:
          _context2.next = 25;
          break;

        case 21:
          _context2.prev = 21;
          _context2.t0 = _context2["catch"](10);
          _didIteratorError = true;
          _iteratorError = _context2.t0;

        case 25:
          _context2.prev = 25;
          _context2.prev = 26;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 28:
          _context2.prev = 28;

          if (!_didIteratorError) {
            _context2.next = 31;
            break;
          }

          throw _iteratorError;

        case 31:
          return _context2.finish(28);

        case 32:
          return _context2.finish(25);

        case 33:
          spinner.succeed();
          return _context2.abrupt("return", {
            contentfulRecordMap: contentfulRecordMap,
            recordsToPublish: recordsToPublish
          });

        case 35:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[10, 21, 25, 33], [26,, 28, 32]]);
};

exports["default"] = _callee;