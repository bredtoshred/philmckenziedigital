"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ora = _interopRequireDefault(require("ora"));

var _progress = _interopRequireDefault(require("./progress"));

var _toApiKey = require("./toApiKey");

var _datoFieldValidatorsFor = _interopRequireDefault(require("./datoFieldValidatorsFor"));

var _delay = _interopRequireDefault(require("./delay"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* eslint-disable no-constant-condition */
var _callee = function _callee(_ref) {
  var itemTypes, fieldsMapping, datoClient, contentfulData, spinner, contentTypes, fieldsSize, progress, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, contentType, contentTypeApiKey, itemTypeFields, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, field, _loop, _ret;

  return regeneratorRuntime.async(function _callee$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          itemTypes = _ref.itemTypes, fieldsMapping = _ref.fieldsMapping, datoClient = _ref.datoClient, contentfulData = _ref.contentfulData;
          spinner = (0, _ora["default"])('').start();
          contentTypes = contentfulData.contentTypes;
          fieldsSize = contentTypes.map(function (contentType) {
            return contentType.fields.length;
          }).reduce(function (acc, length) {
            return acc + length;
          }, 0);
          progress = new _progress["default"](fieldsSize, 'Adding validations on fields');
          spinner.text = progress.tick();
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context2.prev = 9;
          _iterator = contentTypes[Symbol.iterator]();

        case 11:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context2.next = 51;
            break;
          }

          contentType = _step.value;
          contentTypeApiKey = (0, _toApiKey.toItemApiKey)(contentType.sys.id);
          itemTypeFields = fieldsMapping[contentTypeApiKey];
          _iteratorNormalCompletion2 = true;
          _didIteratorError2 = false;
          _iteratorError2 = undefined;
          _context2.prev = 18;
          _iterator2 = contentType.fields[Symbol.iterator]();

        case 20:
          if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
            _context2.next = 34;
            break;
          }

          field = _step2.value;

          _loop = function _loop() {
            var fieldApiKey, datoField, validators;
            return regeneratorRuntime.async(function _loop$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    fieldApiKey = (0, _toApiKey.toFieldApiKey)(field.id);
                    datoField = itemTypeFields.find(function (f) {
                      return f.apiKey === fieldApiKey;
                    });

                    if (datoField) {
                      _context.next = 4;
                      break;
                    }

                    return _context.abrupt("return", "break");

                  case 4:
                    _context.next = 6;
                    return regeneratorRuntime.awrap((0, _datoFieldValidatorsFor["default"])({
                      field: field,
                      itemTypes: itemTypes
                    }));

                  case 6:
                    validators = _context.sent;
                    _context.prev = 7;
                    _context.next = 10;
                    return regeneratorRuntime.awrap(datoClient.fields.update(datoField.id, {
                      validators: validators
                    }));

                  case 10:
                    spinner.text = progress.tick();
                    return _context.abrupt("return", "break");

                  case 14:
                    _context.prev = 14;
                    _context.t0 = _context["catch"](7);

                    if (!(!_context.t0.body || !_context.t0.body.data || !_context.t0.body.data.some(function (d) {
                      return d.id === 'BATCH_DATA_VALIDATION_IN_PROGRESS';
                    }))) {
                      _context.next = 21;
                      break;
                    }

                    spinner.fail(_context.t0);
                    process.exit();
                    _context.next = 23;
                    break;

                  case 21:
                    _context.next = 23;
                    return regeneratorRuntime.awrap((0, _delay["default"])(1000));

                  case 23:
                  case "end":
                    return _context.stop();
                }
              }
            }, null, null, [[7, 14]]);
          };

        case 23:
          if (!true) {
            _context2.next = 31;
            break;
          }

          _context2.next = 26;
          return regeneratorRuntime.awrap(_loop());

        case 26:
          _ret = _context2.sent;

          if (!(_ret === "break")) {
            _context2.next = 29;
            break;
          }

          return _context2.abrupt("break", 31);

        case 29:
          _context2.next = 23;
          break;

        case 31:
          _iteratorNormalCompletion2 = true;
          _context2.next = 20;
          break;

        case 34:
          _context2.next = 40;
          break;

        case 36:
          _context2.prev = 36;
          _context2.t0 = _context2["catch"](18);
          _didIteratorError2 = true;
          _iteratorError2 = _context2.t0;

        case 40:
          _context2.prev = 40;
          _context2.prev = 41;

          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }

        case 43:
          _context2.prev = 43;

          if (!_didIteratorError2) {
            _context2.next = 46;
            break;
          }

          throw _iteratorError2;

        case 46:
          return _context2.finish(43);

        case 47:
          return _context2.finish(40);

        case 48:
          _iteratorNormalCompletion = true;
          _context2.next = 11;
          break;

        case 51:
          _context2.next = 57;
          break;

        case 53:
          _context2.prev = 53;
          _context2.t1 = _context2["catch"](9);
          _didIteratorError = true;
          _iteratorError = _context2.t1;

        case 57:
          _context2.prev = 57;
          _context2.prev = 58;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 60:
          _context2.prev = 60;

          if (!_didIteratorError) {
            _context2.next = 63;
            break;
          }

          throw _iteratorError;

        case 63:
          return _context2.finish(60);

        case 64:
          return _context2.finish(57);

        case 65:
          spinner.succeed();

        case 66:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[9, 53, 57, 65], [18, 36, 40, 48], [41,, 43, 47], [58,, 60, 64]]);
};

exports["default"] = _callee;